'use strict';

/******************************************************************************
 *
 * CAR
 *
 ******************************************************************************/

const Car1 = function ({ brand, model, price } = {}) {
  // const { brand, model, price } = config; - –¥–µ—Å—Ç—Ä—É–∫

  // 2. –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞,
  //    —Ç–æ –µ—Å—Ç—å –≤ this –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ
  this.brand = brand;
  this.model = model;
  this.price = price;

  // 3. –í —Å–≤–æ–π—Å—Ç–≤–æ this.__proto__ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—å–µ–∫—Ç Car.prototype
  //    —Ç–æ–µ—Å—Ç—å Car.prototype —ç—Ç–æ –ü–†–û–¢–û–¢–ò–ü –±—É–¥—É—â–µ–≥–æ –æ–±—å–µ–∫—Ç–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞)

  // 4. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—å–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ new Car
};

Car1.prototype.sayHi = function () {
  console.log('Car.prototype.sayHi -> this', this);
  console.log('Hello :) ');
};

Car1.prototype.changePrice = function (newPrice) {
  this.price = newPrice;
};

console.log(Car1.prototype);

// 1. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ new, —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
const myCar = new Car1({
  brand: 'Audi',
  model: 'Q3',
  price: 35000,
});
console.log(myCar);

myCar.sayHi();
myCar.changePrice(10000);

const myCar2 = new Car1({ brand: 'BMW', model: 'X6', price: 50000 });
console.log(myCar2);

myCar2.sayHi();

const myCar3 = new Car1({ brand: 'Audi', model: 'A6', price: 65000 });
console.log(myCar3);

myCar3.sayHi();

// =============================================================
// =============================================================
// =============================================================

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
class Car {
  static description = '–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å'; // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞

  static logInfo(carObj) {
    console.log('Car.logInfo -> carObj', carObj); // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  }

  #test = 'test'; // –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  #test2; // –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  price = 'price'; // –ø—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  model; // –ø—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞

  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
  constructor({ brand, model, price } = {}) {
    this.brand = brand;
    this._model = model;
    this._price = price;
  }

  // –ü—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞ this.a
  a = 5;

  // –ü—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞ this.gainXp
  gainXp = amount => {
    this.xp += amount;
    console.log(this.xp);
  };

  // –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –∏–¥–µ—Ç –Ω–∞ prototype
  changePrice(newPrice) {
    this._price = newPrice;
  }

  // –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –∏–¥–µ—Ç –Ω–∞ prototype
  sayHi() {
    console.log('Car.prototype.sayHi -> this', this);
    console.log('Hello :) ');
  }

  // –ì–µ—Ç—Ç–µ—Ä - –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  get price() {
    return this._price;
  }

  // –°–µ—Ç—Ç–µ—Ä –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  set price(newPrice) {
    this._price = newPrice;
  }

  // –ì–µ—Ç—Ç–µ—Ä - –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  get model() {
    return this._model;
  }

  // –°–µ—Ç—Ç–µ—Ä –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  set model(newModel) {
    this._model = newModel;
  }
}

// —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
const carInstance = new Car({
  brand: 'Audi',
  model: 'Q3',
  price: 35000,
});

console.log(carInstance.model); // –ì–µ—Ç—Ç–µ—Ä - –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
carInstance.model = 'Q4'; // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ç—Ç–µ—Ä, –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
console.log(carInstance.model);

console.log(carInstance.price); // –ì–µ—Ç—Ç–µ—Ä - –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
carInstance.price = 50000; // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ç—Ç–µ—Ä, –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
console.log(carInstance.price);

console.log(carInstance);

// callback function
const fn = function (callback) {
  callback(1000);
};

// –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ü—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ callback function
fn(mango.gainXp);

/******************************************************************************
 *
 * HERO
 *
 ******************************************************************************/

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
class Hero {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
  constructor(name, xp) {
    this.name = name;
    this.xp = xp;
  }

  // –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –∏–¥–µ—Ç –Ω–∞ prototype
  gainXp(amount) {
    console.log(`${this.name} gained ${amount} experience points`);
    this.xp += amount;
  }
}

// –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Hero ( –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä, –ø—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ)
// Warrior.prototype = Object.create(Hero.prototype);
class Warrior extends Hero {
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
  constructor(name, xp, weapon) {
    // super(–∞—Ä–≥—É–º–µ–Ω—Ç—ã) –ø—Å–µ–≤–¥–æ–Ω–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–≤—ã–∑–æ–≤ Hero)
    super(name, xp);
    this.weapon = weapon;
  }

  attack() {
    console.log(`${this.name} attacks with ${this.weapon}`);
    // –≤—ã–∑–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ Hero.prototype.gainXp.call(this)
    super.gainXp(10);
  }
}

const mango2 = new Warrior('Mango', 1000, 'axe');
console.log(mango2);
mango2.attack();

// console.log(poly2.__proto__ === Berserk.prototype);
// console.log(Berserk.prototype.__proto__ === Warrior.prototype);
// console.log(Warrior.prototype.__proto__ === Hero.prototype);
// console.log(Hero.prototype.__proto__ === Object.prototype);
class Berserk extends Warrior {
  constructor(name, xp, weapon, roar) {
    super(name, xp, weapon);

    this.roar = roar;
  }

  battlecry() {
    console.log(this.roar);
  }
}

const poly2 = new Berserk('Poly', 1000, 'halberd', 'Waaaaaaaaah!');

console.log(poly2);

poly2.battlecry();

// =============================================================
// =============================================================
// =============================================================

const Hero = function (name, xp) {
  this.name = name;
  this.xp = xp;
};

Hero.prototype.gainXp = function (amount) {
  console.log(`${this.name} gained ${amount} experience points`);
  this.xp += amount;
};

const Warrior = function (name, xp, weapon) {
  // this = Object.create(Warrior.prototype);
  Hero.call(this, name, xp);

  // this: {name: 'Mango', xp: 1000}

  this.weapon = weapon;
};

Warrior.prototype = Object.create(Hero.prototype);
// {__proto__: Hero.prototype}

Warrior.prototype.constructor = Warrior;
// {__proto__: Hero.prototype, constructor: Warrior}

Warrior.prototype.attack = function () {
  console.log(`${this.name} attacks with ${this.weapon}`);
};

const mango1 = new Warrior('Mango', 1000, 'halberd');

console.log(mango1);

mango1.gainXp(2000);

// =============================================================
// =============================================================
// =============================================================

// –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
class Hero {
  // –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
  constructor({ name = 'hero', xp = 0 } = {}) {
    this.name = name;
    this.xp = xp;
  }

  gainXp(amount) {
    console.log(`${this.name} –ø–æ–ª—É—á–∞–µ—Ç ${amount} –æ–ø—ã—Ç–∞`);
    this.xp += amount;
  }
}

// –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –∫–ª–∞—Å—Å
class Warrior extends Hero {
  constructor({ weapon, ...restProps } = {}) {
    super(restProps);

    this.weapon = weapon;
  }

  attack() {
    console.log(`${this.name} –∞—Ç–∞–∫—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è ${this.weapon}`);
  }
}

class Berserk extends Warrior {
  constructor({ warcry, ...restProps } = {}) {
    super(restProps);

    this.warcry = warcry;
  }

  babyRage() {
    console.log(this.warcry);
  }
}

const ajax = new Berserk({
  name: 'ajax',
  xp: 500,
  weapon: 'axe',
  warcry: 'waaaaaaaah',
});

console.log(ajax);

ajax.babyRage();
ajax.attack();
ajax.gainXp();

class Mage extends Hero {
  constructor({ spells, ...restProps } = {}) {
    super(restProps);

    this.spells = spells;
  }

  cast() {
    console.log(`${this.name} —á—Ç–æ-—Ç–æ —Ç–∞–º –∫–∞—Å—Ç—É–µ—Ç üßô‚Äç‚ôÇÔ∏è`);
  }
}

const mango = new Warrior({
  name: 'mango',
  xp: 1000,
  weapon: '–∞–ª–µ–±–∞—Ä–¥–∞',
});
console.log(mango);
mango.attack();
mango.gainXp(1000);

const poly = new Mage({
  name: 'poly',
  xp: 500,
  spells: ['—Ñ–∞–µ—Ä–±–æ–ª'],
});
console.log(poly);
poly.cast();
poly.gainXp(200);

console.log(
  'mango.__proto__ === Warrior.prototype ',
  mango.__proto__ === Warrior.prototype,
);
console.log(Object.getPrototypeOf(mango) === Warrior.prototype);

console.log(
  'Warrior.prototype.__proto__ === Hero.prototype ',
  Warrior.prototype.__proto__ === Hero.prototype,
);

console.log(
  'Hero.prototype.__proto__ === Object.prototype ',
  Hero.prototype.__proto__ === Object.prototype,
);
